//synchronous
console.log(" I ");

console.log(" eat ");

console.log(" Ice Cream ");
//-----------------------------------------------------------------------------
//Asynchronous
console.log("I");

// This will be shown after 2 seconds

setTimeout(()=>{
  console.log("eat");
},2000)

console.log("Ice Cream")
//-----------------------------------------------------------------------------

//Callback hell
let stocks = {
  Fruits: ["strawberry", "grapes", "banana", "apple"],
  liquid: ["water", "ice"],
  holder: ["cone", "cup", "stick"],
  toppings: ["chocolate", "peanuts"]
};

console.log(stocks.Fruits[0]);
console.log(stocks.holder[2]);

let order = (Fruit_name, call_production) => {
  setTimeout(() => {
    console.log(`${stocks.Fruits[Fruit_name]} was selected - 2sec`);
    call_production();
  }, 2000);
};

let production = () => {
  setTimeout(() => {
    console.log("Production has started" - 0sec);

    setTimeout(() => {
      console.log("The fruit has been chopped- 2sec");

      setTimeout(() => {
        console.log(
          `${stocks.liquid[0]} and ${stocks.liquid[1]} was added - 1sec`
        );

        setTimeout(() => {
          console.log("the machine has started - 1sec");

          setTimeout(() => {
            console.log(
              `ice cream was placed on the ${stocks.holder[0]} - 2sec`
            );

            setTimeout(() => {
              console.log(`${stocks.toppings[0]} was added as toppings - 3sec`);

              setTimeout(() => {
                console.log("ice cream is served - 2sec");
              }, 2000);
            }, 3000);
          }, 2000);
        }, 1000);
      }, 1000);
    }, 2000);
  }, 0);
};

order(0, production);

//-------------------------------------------------------------------------------------------

//Promises
let stocks = {
  Fruits: ["strawberry", "grapes", "banana", "apple"],
  liquid: ["water", "ice"],
  holder: ["cone", "cup", "stick"],
  toppings: ["chocolate", "peanuts"]
};

let is_shop_open = true;
//let is_shop_open = false;
let order = (time, work) => {
  return new Promise((resolve, reject) => {
    if (is_shop_open) {
      setTimeout(() => {
        resolve(work());
      }, time);
    } else {
      reject(console.log("our shop is closed"));
    }
  });
};

order(2000, () => console.log(`${stocks.Fruits[0]} was selected`))
  
  .then(() => {
    return order(0, () => console.log("Production has started"));
  })

  .then(() => {
    return order(2000, () => console.log("the fruit was chopped"));
  })

  .then(() => {
    return order(1000, () =>
      console.log(`${stocks.liquid[0]} and ${stocks.liquid[1]} was selected`)
    );
  })

  .then(() => {
    return order(1000, () => console.log("Machine was started"));
  })

  .then(() => {
    return order(2000, () =>
      console.log(`${stocks.holder[0]} was selected as container`)
    );
  })

  .then(() => {
    return order(3000, () =>
      console.log(`${stocks.toppings[0]} topping was added`)
    );
  })

  .then(() => {
    return order(2000, () => console.log("the ice cream was served"));
  })

  .catch(()=>{
    console.log("customer left")
  })

  .finally(()=>console.log("day ended, shop is closed"))
//------------------------------------------------------------------------------------------

//async
let stocks = {
  Fruits: ["strawberry", "grapes", "banana", "apple"],
  liquid: ["water", "ice"],
  holder: ["cone", "cup", "stick"],
  toppings: ["chocolate", "peanuts"]
};

let is_shop_open = true;

// let order =()=>{
//   return new Promise((resolve,reject)=>{
//     if(true){
//       resolve()
//     }
//     else{
//       reject()
//     }
//   })
// }

//order()
//.then()
//.then()
//.then()
//.then()
//.catch()
//.finally()


//format to write async
// async function order(){
//   try{
//     await abc;
//   }
//   catch(error){
//     console.log("abc doesn't exists", error)
//   }
  
//   finally{
//     console.log("runs code anyways")
//   }
// }
// order().then(() => {
//   console.log("printing output")
// })

//-------------------------------------------------------------------------
//await

let stocks = {
  Fruits: ["strawberry", "grapes", "banana", "apple"],
  liquid: ["water", "ice"],
  holder: ["cone", "cup", "stick"],
  toppings: ["chocolate", "peanuts"]
};

let is_shop_open = true;

let toppings_choice = () =>{
  return new Promise((resolve, reject) => {
    
    setTimeout(()=>{
      resolve(console.log("which topping would you like?"))
    },3000)
  })
}

async function kitchen (){
  console.log("A")
  console.log("B")
  console.log("C")
  
  await toppings_choice()
  console.log("D")
  console.log("E")
}

kitchen()

console.log("doing the dishes")
console.log("cleaning the tables")
console.log("taking others orders")

//------------------------------------------------------------------------------------------
//final with async await

/*jshint esversion: 6 */
let stocks = {
  Fruits: ["strawberry", "grapes", "banana", "apple"],
  liquid: ["water", "ice"],
  holder: ["cone", "cup", "stick"],
  toppings: ["chocolate", "peanuts"]
};

let is_shop_open = false;

function time(ms) {
  return new Promise((resolve, reject) => {
    if (is_shop_open) {
      setTimeout(resolve, ms);
    } else {
      reject(console.log("shop is closed"));
    }
  });
}

async function kitchen() {
  try {
    await time(2000);
    console.log(`${stocks.Fruits[0]} was selected`);
    await time(0);
    console.log("Production has started");
    await time(2000);
    console.log("the fruit was chopped");
    await time(1000);
    console.log(`${stocks.liquid[0]} and ${stocks.liquid[1]} was selected`);
    await time(1000);
    console.log("Machine was started");
    await time(2000);
    console.log(`${stocks.holder[0]} was selected as container`);
    await time(3000);
    console.log(`${stocks.toppings[0]} topping was added`);
    await time(2000);
    console.log("the ice cream was served");
  } catch (error) {
    console.log("customer left", error);
  } finally {
    console.log("day ended, shop is closed ");
  }
}

kitchen();